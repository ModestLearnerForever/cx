// Code generated by goyacc - DO NOT EDIT.

package cx0

import __yyfmt__ "fmt"

import (
	"bytes"
	"fmt"
	. "github.com/skycoin/cx/src/base"
	"github.com/skycoin/skycoin/src/cipher/encoder"
)

var CXT = MakeContext()

var replMode bool = false
var inREPL bool = false
var inFn bool = false
var fileName string

func Parse(code string) int {
	codeBuf := bytes.NewBufferString(code)
	return yyParse(NewLexer(codeBuf))
}

type yySymType struct {
	yys     int
	i       int
	byt     byte
	i32     int32
	i64     int64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string

	line int

	parameter  *CXParameter
	parameters []*CXParameter

	argument  *CXArgument
	arguments []*CXArgument

	definition  *CXDefinition
	definitions []*CXDefinition

	expression  *CXExpression
	expressions []*CXExpression

	field  *CXField
	fields []*CXField

	name  string
	names []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault    = 57441
	yyEofCode    = 57344
	ADDR         = 57439
	AFF          = 57435
	AFFVAR       = 57393
	AND          = 57387
	ASSIGN       = 57371
	BASICTYPE    = 57416
	BITAND       = 57401
	BITANDEQ     = 57413
	BITCLEAR     = 57404
	BITOR        = 57403
	BITOREQ      = 57415
	BITXOR       = 57402
	BITXOREQ     = 57414
	BOOLEAN      = 57348
	BYTENUM      = 57346
	CASSIGN      = 57372
	CLAUSES      = 57426
	COLON        = 57379
	COMMA        = 57362
	COMMENT      = 57363
	DEF          = 57421
	DIV          = 57392
	DIVEQ        = 57408
	DOUBLE       = 57351
	DPROGRAM     = 57433
	DSTACK       = 57432
	DSTATE       = 57434
	ELSE         = 57367
	EQUAL        = 57378
	EQUALWORD    = 57381
	EXP          = 57399
	EXPEQ        = 57410
	EXPR         = 57422
	FIELD        = 57423
	FLOAT        = 57350
	FOR          = 57368
	FUNC         = 57352
	GOTO         = 57375
	GTHAN        = 57376
	GTHANEQ      = 57384
	GTHANWORD    = 57382
	IDENT        = 57360
	IF           = 57366
	IMPORT       = 57373
	INFER        = 57437
	INPUT        = 57424
	INT          = 57347
	LBRACE       = 57356
	LBRACK       = 57358
	LEFTSHIFT    = 57397
	LEFTSHIFTEQ  = 57411
	LONG         = 57349
	LPAREN       = 57354
	LTHAN        = 57377
	LTHANEQ      = 57385
	LTHANWORD    = 57383
	MINUS        = 57390
	MINUSEQ      = 57406
	MINUSMINUS   = 57395
	MULT         = 57391
	MULTEQ       = 57407
	NEW          = 57380
	NOT          = 57400
	OBJECT       = 57427
	OBJECTS      = 57428
	OP           = 57353
	OR           = 57388
	OUTPUT       = 57425
	PACKAGE      = 57365
	PLUS         = 57389
	PLUSEQ       = 57405
	PLUSPLUS     = 57394
	PSTEP        = 57430
	RBRACE       = 57357
	RBRACK       = 57359
	REM          = 57420
	REMAINDER    = 57396
	REMAINDEREQ  = 57409
	RETURN       = 57374
	RIGHTSHIFT   = 57398
	RIGHTSHIFTEQ = 57412
	RPAREN       = 57355
	SFUNC        = 57419
	SPACKAGE     = 57417
	SSTRUCT      = 57418
	STEP         = 57429
	STRING       = 57364
	STRUCT       = 57370
	TAG          = 57436
	TSTEP        = 57431
	TYPSTRUCT    = 57369
	UNEQUAL      = 57386
	VALUE        = 57438
	VAR          = 57361
	yyErrCode    = 57345

	yyMaxDepth = 200
	yyTabOfs   = -290
)

var (
	yyPrec = map[int]int{
		OR:         0,
		AND:        1,
		BITCLEAR:   2,
		BITOR:      3,
		BITXOR:     4,
		BITAND:     5,
		EQUAL:      6,
		UNEQUAL:    6,
		GTHAN:      7,
		LTHAN:      7,
		GTHANEQ:    7,
		LTHANEQ:    7,
		LEFTSHIFT:  8,
		RIGHTSHIFT: 8,
		PLUS:       9,
		MINUS:      9,
		REMAINDER:  10,
		MULT:       10,
		DIV:        10,
		EXP:        11,
		PLUSPLUS:   12,
		MINUSMINUS: 12,
		NOT:        13,
		LPAREN:     14,
		IDENT:      14,
	}

	yyXLAT = map[int]int{
		57360: 0,   // IDENT (347x)
		57347: 1,   // INT (291x)
		57354: 2,   // LPAREN (291x)
		57364: 3,   // STRING (285x)
		57416: 4,   // BASICTYPE (283x)
		57348: 5,   // BOOLEAN (282x)
		57346: 6,   // BYTENUM (279x)
		57351: 7,   // DOUBLE (279x)
		57350: 8,   // FLOAT (279x)
		57437: 9,   // INFER (279x)
		57349: 10,  // LONG (279x)
		57380: 11,  // NEW (279x)
		57400: 12,  // NOT (279x)
		57357: 13,  // RBRACE (278x)
		59:    14,  // ';' (252x)
		57433: 15,  // DPROGRAM (243x)
		57432: 16,  // DSTACK (243x)
		57434: 17,  // DSTATE (243x)
		57361: 18,  // VAR (233x)
		57436: 19,  // TAG (232x)
		57435: 20,  // AFF (230x)
		57420: 21,  // REM (230x)
		57419: 22,  // SFUNC (230x)
		57417: 23,  // SPACKAGE (230x)
		57418: 24,  // SSTRUCT (230x)
		57429: 25,  // STEP (230x)
		57431: 26,  // TSTEP (230x)
		57438: 27,  // VALUE (226x)
		57439: 28,  // ADDR (222x)
		57366: 29,  // IF (206x)
		57368: 30,  // FOR (200x)
		57375: 31,  // GOTO (200x)
		57374: 32,  // RETURN (200x)
		57352: 33,  // FUNC (179x)
		57365: 34,  // PACKAGE (176x)
		57373: 35,  // IMPORT (175x)
		57369: 36,  // TYPSTRUCT (174x)
		57344: 37,  // $end (172x)
		57356: 38,  // LBRACE (155x)
		57362: 39,  // COMMA (151x)
		57355: 40,  // RPAREN (143x)
		57378: 41,  // EQUAL (133x)
		57376: 42,  // GTHAN (133x)
		57377: 43,  // LTHAN (133x)
		57391: 44,  // MULT (133x)
		57386: 45,  // UNEQUAL (133x)
		57387: 46,  // AND (132x)
		57401: 47,  // BITAND (132x)
		57404: 48,  // BITCLEAR (132x)
		57403: 49,  // BITOR (132x)
		57402: 50,  // BITXOR (132x)
		57392: 51,  // DIV (132x)
		57399: 52,  // EXP (132x)
		57384: 53,  // GTHANEQ (132x)
		57397: 54,  // LEFTSHIFT (132x)
		57385: 55,  // LTHANEQ (132x)
		57390: 56,  // MINUS (132x)
		57388: 57,  // OR (132x)
		57389: 58,  // PLUS (132x)
		57396: 59,  // REMAINDER (132x)
		57398: 60,  // RIGHTSHIFT (132x)
		57395: 61,  // MINUSMINUS (119x)
		57394: 62,  // PLUSPLUS (119x)
		57371: 63,  // ASSIGN (118x)
		57413: 64,  // BITANDEQ (118x)
		57415: 65,  // BITOREQ (118x)
		57414: 66,  // BITXOREQ (118x)
		57372: 67,  // CASSIGN (118x)
		57408: 68,  // DIVEQ (118x)
		57410: 69,  // EXPEQ (118x)
		57411: 70,  // LEFTSHIFTEQ (118x)
		57406: 71,  // MINUSEQ (118x)
		57407: 72,  // MULTEQ (118x)
		57405: 73,  // PLUSEQ (118x)
		57409: 74,  // REMAINDEREQ (118x)
		57412: 75,  // RIGHTSHIFTEQ (118x)
		57443: 76,  // argument (75x)
		57477: 77,  // nonAssignExpression (75x)
		57445: 78,  // argumentsList (20x)
		57450: 79,  // debugging (20x)
		57442: 80,  // affordance (16x)
		57446: 81,  // assignExpression (16x)
		57482: 82,  // remover (16x)
		57484: 83,  // selector (16x)
		57489: 84,  // stepping (16x)
		57448: 85,  // beginFor (14x)
		57488: 86,  // statement (14x)
		57455: 87,  // expressionsAndStatements (7x)
		57393: 88,  // AFFVAR (6x)
		57467: 89,  // inferObj (6x)
		57479: 90,  // parameter (6x)
		57459: 91,  // functionParameters (5x)
		57370: 92,  // STRUCT (5x)
		57460: 93,  // functionStatements (4x)
		57462: 94,  // inferAction (4x)
		57358: 95,  // LBRACK (4x)
		57447: 96,  // assignOperator (3x)
		57466: 97,  // inferCond (3x)
		57444: 98,  // arguments (2x)
		57449: 99,  // conditionControl (2x)
		57451: 100, // definitionAssignment (2x)
		57452: 101, // definitionDeclaration (2x)
		57422: 102, // EXPR (2x)
		57456: 103, // fields (2x)
		57457: 104, // forLoopAssignExpression (2x)
		57458: 105, // functionDeclaration (2x)
		57461: 106, // importDeclaration (2x)
		57464: 107, // inferActions (2x)
		57470: 108, // inferRule (2x)
		57472: 109, // inferTarget (2x)
		57475: 110, // line (2x)
		57476: 111, // lines (2x)
		57478: 112, // packageDeclaration (2x)
		57359: 113, // RBRACK (2x)
		57490: 114, // structDeclaration (2x)
		57492: 115, // structLitDef (2x)
		57440: 116, // $@1 (1x)
		57421: 117, // DEF (1x)
		57367: 118, // ELSE (1x)
		57453: 119, // elseStatement (1x)
		57423: 120, // FIELD (1x)
		57463: 121, // inferActionArg (1x)
		57465: 122, // inferClauses (1x)
		57468: 123, // inferObjs (1x)
		57469: 124, // inferPred (1x)
		57471: 125, // inferRules (1x)
		57473: 126, // inferTargets (1x)
		57474: 127, // inferWeight (1x)
		57424: 128, // INPUT (1x)
		57425: 129, // OUTPUT (1x)
		57480: 130, // parameters (1x)
		57481: 131, // relationalOp (1x)
		57483: 132, // returnArg (1x)
		57485: 133, // selectorExpressionsAndStatements (1x)
		57486: 134, // selectorFields (1x)
		57487: 135, // selectorLines (1x)
		57491: 136, // structFields (1x)
		57493: 137, // structLitDefs (1x)
		57441: 138, // $default (0x)
		57426: 139, // CLAUSES (0x)
		57379: 140, // COLON (0x)
		57363: 141, // COMMENT (0x)
		57381: 142, // EQUALWORD (0x)
		57345: 143, // error (0x)
		57454: 144, // expressions (0x)
		57382: 145, // GTHANWORD (0x)
		57383: 146, // LTHANWORD (0x)
		57427: 147, // OBJECT (0x)
		57428: 148, // OBJECTS (0x)
		57353: 149, // OP (0x)
		57430: 150, // PSTEP (0x)
	}

	yySymNames = []string{
		"IDENT",
		"INT",
		"LPAREN",
		"STRING",
		"BASICTYPE",
		"BOOLEAN",
		"BYTENUM",
		"DOUBLE",
		"FLOAT",
		"INFER",
		"LONG",
		"NEW",
		"NOT",
		"RBRACE",
		"';'",
		"DPROGRAM",
		"DSTACK",
		"DSTATE",
		"VAR",
		"TAG",
		"AFF",
		"REM",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"STEP",
		"TSTEP",
		"VALUE",
		"ADDR",
		"IF",
		"FOR",
		"GOTO",
		"RETURN",
		"FUNC",
		"PACKAGE",
		"IMPORT",
		"TYPSTRUCT",
		"$end",
		"LBRACE",
		"COMMA",
		"RPAREN",
		"EQUAL",
		"GTHAN",
		"LTHAN",
		"MULT",
		"UNEQUAL",
		"AND",
		"BITAND",
		"BITCLEAR",
		"BITOR",
		"BITXOR",
		"DIV",
		"EXP",
		"GTHANEQ",
		"LEFTSHIFT",
		"LTHANEQ",
		"MINUS",
		"OR",
		"PLUS",
		"REMAINDER",
		"RIGHTSHIFT",
		"MINUSMINUS",
		"PLUSPLUS",
		"ASSIGN",
		"BITANDEQ",
		"BITOREQ",
		"BITXOREQ",
		"CASSIGN",
		"DIVEQ",
		"EXPEQ",
		"LEFTSHIFTEQ",
		"MINUSEQ",
		"MULTEQ",
		"PLUSEQ",
		"REMAINDEREQ",
		"RIGHTSHIFTEQ",
		"argument",
		"nonAssignExpression",
		"argumentsList",
		"debugging",
		"affordance",
		"assignExpression",
		"remover",
		"selector",
		"stepping",
		"beginFor",
		"statement",
		"expressionsAndStatements",
		"AFFVAR",
		"inferObj",
		"parameter",
		"functionParameters",
		"STRUCT",
		"functionStatements",
		"inferAction",
		"LBRACK",
		"assignOperator",
		"inferCond",
		"arguments",
		"conditionControl",
		"definitionAssignment",
		"definitionDeclaration",
		"EXPR",
		"fields",
		"forLoopAssignExpression",
		"functionDeclaration",
		"importDeclaration",
		"inferActions",
		"inferRule",
		"inferTarget",
		"line",
		"lines",
		"packageDeclaration",
		"RBRACK",
		"structDeclaration",
		"structLitDef",
		"$@1",
		"DEF",
		"ELSE",
		"elseStatement",
		"FIELD",
		"inferActionArg",
		"inferClauses",
		"inferObjs",
		"inferPred",
		"inferRules",
		"inferTargets",
		"inferWeight",
		"INPUT",
		"OUTPUT",
		"parameters",
		"relationalOp",
		"returnArg",
		"selectorExpressionsAndStatements",
		"selectorFields",
		"selectorLines",
		"structFields",
		"structLitDefs",
		"$default",
		"CLAUSES",
		"COLON",
		"COMMENT",
		"EQUALWORD",
		"error",
		"expressions",
		"GTHANWORD",
		"LTHANWORD",
		"OBJECT",
		"OBJECTS",
		"OP",
		"PSTEP",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {111, 0},
		2:   {111, 2},
		3:   {111, 2},
		4:   {110, 1},
		5:   {110, 1},
		6:   {110, 1},
		7:   {110, 1},
		8:   {110, 1},
		9:   {110, 1},
		10:  {110, 1},
		11:  {110, 1},
		12:  {110, 1},
		13:  {110, 1},
		14:  {106, 2},
		15:  {80, 1},
		16:  {80, 3},
		17:  {80, 6},
		18:  {80, 6},
		19:  {80, 7},
		20:  {80, 3},
		21:  {80, 6},
		22:  {80, 6},
		23:  {80, 7},
		24:  {80, 3},
		25:  {80, 6},
		26:  {80, 6},
		27:  {80, 7},
		28:  {80, 3},
		29:  {80, 6},
		30:  {80, 6},
		31:  {80, 7},
		32:  {84, 3},
		33:  {84, 2},
		34:  {79, 1},
		35:  {79, 1},
		36:  {79, 1},
		37:  {82, 3},
		38:  {82, 3},
		39:  {82, 3},
		40:  {82, 3},
		41:  {82, 3},
		42:  {82, 5},
		43:  {82, 5},
		44:  {82, 5},
		45:  {82, 5},
		46:  {135, 0},
		47:  {135, 3},
		48:  {133, 0},
		49:  {133, 3},
		50:  {134, 0},
		51:  {134, 3},
		52:  {83, 3},
		53:  {83, 3},
		54:  {83, 3},
		55:  {96, 1},
		56:  {96, 1},
		57:  {96, 1},
		58:  {96, 1},
		59:  {96, 1},
		60:  {96, 1},
		61:  {96, 1},
		62:  {96, 1},
		63:  {96, 1},
		64:  {96, 1},
		65:  {96, 1},
		66:  {96, 1},
		67:  {96, 1},
		68:  {112, 2},
		69:  {100, 0},
		70:  {100, 2},
		71:  {100, 3},
		72:  {100, 3},
		73:  {101, 4},
		74:  {101, 3},
		75:  {103, 1},
		76:  {103, 1},
		77:  {103, 1},
		78:  {103, 2},
		79:  {103, 2},
		80:  {103, 2},
		81:  {136, 3},
		82:  {136, 2},
		83:  {116, 0},
		84:  {114, 5},
		85:  {91, 3},
		86:  {91, 2},
		87:  {105, 6},
		88:  {105, 5},
		89:  {105, 4},
		90:  {105, 5},
		91:  {90, 2},
		92:  {90, 2},
		93:  {90, 3},
		94:  {130, 1},
		95:  {130, 3},
		96:  {93, 3},
		97:  {93, 2},
		98:  {87, 1},
		99:  {87, 1},
		100: {87, 1},
		101: {87, 1},
		102: {87, 1},
		103: {87, 1},
		104: {87, 1},
		105: {87, 1},
		106: {87, 2},
		107: {87, 2},
		108: {87, 2},
		109: {87, 2},
		110: {87, 2},
		111: {87, 2},
		112: {87, 2},
		113: {87, 2},
		114: {81, 4},
		115: {81, 5},
		116: {81, 3},
		117: {77, 2},
		118: {77, 2},
		119: {77, 2},
		120: {85, 1},
		121: {99, 1},
		122: {99, 1},
		123: {132, 1},
		124: {132, 1},
		125: {86, 2},
		126: {86, 2},
		127: {86, 6},
		128: {86, 5},
		129: {86, 5},
		130: {86, 9},
		131: {86, 3},
		132: {86, 1},
		133: {104, 0},
		134: {104, 1},
		135: {104, 1},
		136: {119, 0},
		137: {119, 4},
		138: {144, 1},
		139: {144, 1},
		140: {144, 2},
		141: {144, 2},
		142: {124, 1},
		143: {124, 1},
		144: {124, 3},
		145: {124, 3},
		146: {97, 4},
		147: {97, 1},
		148: {131, 1},
		149: {131, 1},
		150: {131, 1},
		151: {131, 1},
		152: {121, 1},
		153: {121, 1},
		154: {121, 3},
		155: {121, 3},
		156: {121, 3},
		157: {94, 4},
		158: {107, 1},
		159: {107, 2},
		160: {108, 5},
		161: {108, 5},
		162: {125, 1},
		163: {125, 2},
		164: {127, 1},
		165: {127, 1},
		166: {127, 1},
		167: {89, 0},
		168: {89, 3},
		169: {89, 3},
		170: {123, 1},
		171: {123, 3},
		172: {109, 4},
		173: {126, 1},
		174: {126, 2},
		175: {122, 1},
		176: {122, 1},
		177: {122, 1},
		178: {115, 2},
		179: {115, 2},
		180: {137, 1},
		181: {137, 3},
		182: {76, 3},
		183: {76, 3},
		184: {76, 3},
		185: {76, 3},
		186: {76, 3},
		187: {76, 3},
		188: {76, 3},
		189: {76, 3},
		190: {76, 3},
		191: {76, 3},
		192: {76, 3},
		193: {76, 3},
		194: {76, 3},
		195: {76, 3},
		196: {76, 3},
		197: {76, 3},
		198: {76, 3},
		199: {76, 3},
		200: {76, 3},
		201: {76, 3},
		202: {76, 3},
		203: {76, 3},
		204: {76, 3},
		205: {76, 3},
		206: {76, 3},
		207: {76, 3},
		208: {76, 3},
		209: {76, 3},
		210: {76, 3},
		211: {76, 3},
		212: {76, 3},
		213: {76, 3},
		214: {76, 3},
		215: {76, 3},
		216: {76, 3},
		217: {76, 3},
		218: {76, 3},
		219: {76, 3},
		220: {76, 3},
		221: {76, 3},
		222: {76, 3},
		223: {76, 3},
		224: {76, 3},
		225: {76, 3},
		226: {76, 3},
		227: {76, 3},
		228: {76, 3},
		229: {76, 3},
		230: {76, 3},
		231: {76, 3},
		232: {76, 3},
		233: {76, 3},
		234: {76, 3},
		235: {76, 3},
		236: {76, 3},
		237: {76, 3},
		238: {76, 3},
		239: {76, 3},
		240: {76, 3},
		241: {76, 3},
		242: {76, 3},
		243: {76, 3},
		244: {76, 3},
		245: {76, 3},
		246: {76, 3},
		247: {76, 3},
		248: {76, 3},
		249: {76, 3},
		250: {76, 3},
		251: {76, 3},
		252: {76, 3},
		253: {76, 3},
		254: {76, 3},
		255: {76, 3},
		256: {76, 3},
		257: {76, 3},
		258: {76, 3},
		259: {76, 3},
		260: {76, 3},
		261: {76, 3},
		262: {76, 2},
		263: {76, 2},
		264: {76, 3},
		265: {76, 1},
		266: {76, 1},
		267: {76, 1},
		268: {76, 1},
		269: {76, 1},
		270: {76, 1},
		271: {76, 1},
		272: {76, 1},
		273: {76, 5},
		274: {76, 4},
		275: {76, 4},
		276: {76, 4},
		277: {76, 3},
		278: {98, 3},
		279: {98, 2},
		280: {78, 1},
		281: {78, 1},
		282: {78, 2},
		283: {78, 2},
		284: {78, 2},
		285: {78, 3},
		286: {78, 3},
		287: {78, 4},
		288: {78, 4},
		289: {78, 4},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [483][]uint16{
		// 0
		{14: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 33: 289, 289, 289, 289, 289, 111: 291},
		{14: 293, 311, 310, 309, 317, 305, 306, 312, 314, 313, 315, 308, 307, 33: 319, 316, 304, 318, 290, 79: 301, 302, 82: 303, 299, 300, 101: 294, 105: 298, 297, 110: 292, 112: 296, 114: 295},
		{13: 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 33: 288, 288, 288, 288, 288},
		{13: 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 33: 287, 287, 287, 287, 287},
		{13: 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 33: 286, 286, 286, 286, 286},
		// 5
		{13: 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 33: 285, 285, 285, 285, 285},
		{13: 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 33: 284, 284, 284, 284, 284},
		{13: 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 33: 283, 283, 283, 283, 283},
		{13: 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 33: 282, 282, 282, 282, 282},
		{13: 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 33: 281, 281, 281, 281, 281},
		// 10
		{13: 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 33: 280, 280, 280, 280, 280},
		{13: 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 33: 279, 279, 279, 279, 279},
		{13: 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 33: 278, 278, 278, 278, 278},
		{13: 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 33: 277, 277, 277, 277, 277},
		{3: 772},
		// 15
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275},
		{33: 736, 737, 92: 738, 102: 739},
		{1: 734},
		{1: 733},
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		// 20
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{33: 707, 708, 711, 92: 710, 102: 712, 117: 709, 120: 713, 128: 714, 715},
		{702},
		{697},
		// 25
		{692},
		{691},
		{687},
		{673},
		{322, 2: 320, 91: 321},
		// 30
		{664, 40: 663, 90: 665, 130: 662},
		{657},
		{2: 320, 91: 323},
		{2: 320, 38: 326, 91: 325, 93: 324},
		{13: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 33: 201, 201, 201, 201, 201},
		// 35
		{38: 326, 93: 656},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 328, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 329, 338, 334, 335, 330, 336, 332, 333, 345, 331, 327},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 655, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 598, 338, 603, 604, 599, 605, 601, 602, 345, 600},
		{13: 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 33: 193, 193, 193, 193, 193},
		{192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 39: 9, 41: 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369, 63: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 40
		{191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191},
		{190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190},
		{189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188},
		{187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187},
		// 45
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186},
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185},
		{653},
		{39: 492, 63: 618, 628, 630, 629, 619, 623, 625, 626, 621, 622, 620, 624, 627, 96: 651},
		{18, 18, 528, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 95: 527, 98: 526},
		// 50
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 38: 10, 10, 10, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 14: 170, 18: 170, 27: 170, 170},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 648, 27: 360, 359, 76: 340, 488, 649, 132: 650},
		{647},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 590, 591, 99: 638},
		// 55
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 157, 18: 584, 27: 360, 359, 76: 585, 586, 338, 81: 588, 104: 587},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 582, 583},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 580, 486},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		// 60
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		// 65
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{570},
		{38: 500},
		{38: 487},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 485, 486},
		// 70
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 361, 362},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 38: 7, 7, 7, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 38: 6, 6, 6, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369, 63: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 483, 484},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 481, 482},
		// 75
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 479, 480},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 477, 478},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 475, 476},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 473, 474},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 471, 472},
		// 80
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 469, 470},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 467, 468},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 465, 466},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 463, 464},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 461, 462},
		// 85
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 459, 460},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 457, 458},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 455, 456},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 453, 454},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 451, 452},
		// 90
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 449, 450},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 447, 448},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 383, 384},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 395, 397, 399, 389, 396, 29, 403, 29, 404, 405, 390, 394, 398, 392, 400, 388, 29, 387, 391, 393, 386, 385, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 371, 373, 375, 365, 372, 31, 379, 31, 380, 381, 366, 370, 374, 368, 376, 364, 31, 363, 367, 369, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		// 95
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 445, 446},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 443, 444},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 441, 442},
		// 100
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 439, 440},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 437, 438},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 435, 436},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 433, 434},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 431, 432},
		// 105
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 429, 430},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 427, 428},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 425, 426},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 423, 424},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 421, 422},
		// 110
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 419, 420},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 417, 418},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 415, 416},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 413, 414},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 411, 412},
		// 115
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 409, 410},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 407, 408},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 395, 397, 399, 389, 396, 32, 403, 32, 404, 405, 390, 394, 398, 392, 400, 388, 32, 387, 391, 393, 386, 385, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 371, 373, 375, 365, 372, 30, 379, 30, 380, 381, 366, 370, 374, 368, 376, 364, 30, 363, 367, 369, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 395, 397, 399, 389, 396, 36, 403, 36, 36, 36, 390, 394, 398, 392, 400, 388, 36, 387, 391, 393, 386, 385, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 120
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 371, 373, 375, 365, 372, 34, 379, 34, 34, 34, 366, 370, 374, 368, 376, 364, 34, 363, 367, 369, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 395, 397, 399, 389, 396, 40, 403, 40, 40, 405, 390, 394, 398, 392, 400, 388, 40, 387, 391, 393, 386, 385, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 371, 373, 375, 365, 372, 38, 379, 38, 38, 381, 366, 370, 374, 368, 376, 364, 38, 363, 367, 369, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 395, 397, 399, 389, 396, 44, 44, 44, 44, 44, 390, 394, 398, 392, 400, 388, 44, 387, 391, 393, 386, 385, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 371, 373, 375, 365, 372, 42, 42, 42, 42, 42, 366, 370, 374, 368, 376, 364, 42, 363, 367, 369, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 125
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 395, 397, 399, 389, 396, 48, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 48, 387, 391, 393, 386, 385, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 371, 373, 375, 365, 372, 46, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 46, 363, 367, 369, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 52, 387, 391, 393, 386, 385, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 50, 363, 367, 369, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 389, 56, 56, 56, 56, 56, 56, 390, 394, 56, 392, 56, 388, 56, 387, 391, 393, 386, 385, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 130
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 365, 54, 54, 54, 54, 54, 54, 366, 370, 54, 368, 54, 364, 54, 363, 367, 369, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 389, 60, 60, 60, 60, 60, 60, 390, 394, 60, 392, 60, 388, 60, 387, 391, 393, 386, 385, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 365, 58, 58, 58, 58, 58, 58, 366, 370, 58, 368, 58, 364, 58, 363, 367, 369, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 389, 64, 64, 64, 64, 64, 64, 390, 394, 64, 392, 64, 388, 64, 387, 391, 393, 386, 385, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 365, 62, 62, 62, 62, 62, 62, 366, 370, 62, 368, 62, 364, 62, 363, 367, 369, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		// 135
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 389, 68, 68, 68, 68, 68, 68, 390, 394, 68, 392, 68, 388, 68, 387, 391, 393, 386, 385, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 365, 66, 66, 66, 66, 66, 66, 366, 370, 66, 368, 66, 364, 66, 363, 367, 369, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 397, 399, 389, 72, 72, 72, 72, 72, 72, 390, 394, 398, 392, 400, 388, 72, 387, 391, 393, 386, 385, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 373, 375, 365, 70, 70, 70, 70, 70, 70, 366, 370, 374, 368, 376, 364, 70, 363, 367, 369, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 397, 399, 389, 76, 76, 76, 76, 76, 76, 390, 394, 398, 392, 400, 388, 76, 387, 391, 393, 386, 385, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		// 140
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 373, 375, 365, 74, 74, 74, 74, 74, 74, 366, 370, 374, 368, 376, 364, 74, 363, 367, 369, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 386, 385, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 389, 84, 84, 84, 84, 84, 84, 390, 394, 84, 84, 84, 388, 84, 387, 391, 84, 386, 385, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 365, 82, 82, 82, 82, 82, 82, 366, 370, 82, 82, 82, 364, 82, 363, 367, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		// 145
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 389, 88, 88, 88, 88, 88, 88, 390, 394, 88, 88, 88, 388, 88, 387, 391, 88, 386, 385, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 365, 86, 86, 86, 86, 86, 86, 366, 370, 86, 86, 86, 364, 86, 363, 367, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 394, 92, 92, 92, 92, 92, 92, 92, 92, 386, 385, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 370, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 394, 96, 96, 96, 96, 96, 96, 96, 96, 386, 385, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		// 150
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 370, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 394, 100, 100, 100, 100, 100, 100, 100, 100, 386, 385, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 370, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 389, 104, 104, 104, 104, 104, 104, 390, 394, 104, 104, 104, 104, 104, 104, 391, 104, 386, 385, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 365, 102, 102, 102, 102, 102, 102, 366, 370, 102, 102, 102, 102, 102, 102, 367, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		// 155
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 389, 108, 108, 108, 108, 108, 108, 390, 394, 108, 108, 108, 108, 108, 108, 391, 108, 386, 385, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 365, 106, 106, 106, 106, 106, 106, 366, 370, 106, 106, 106, 106, 106, 106, 367, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 395, 397, 399, 389, 396, 33, 403, 33, 33, 33, 390, 394, 398, 392, 400, 388, 33, 387, 391, 393, 386, 385, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 371, 373, 375, 365, 372, 35, 379, 35, 35, 35, 366, 370, 374, 368, 376, 364, 35, 363, 367, 369, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 395, 397, 399, 389, 396, 37, 403, 37, 37, 405, 390, 394, 398, 392, 400, 388, 37, 387, 391, 393, 386, 385, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 160
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 371, 373, 375, 365, 372, 39, 379, 39, 39, 381, 366, 370, 374, 368, 376, 364, 39, 363, 367, 369, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 395, 397, 399, 389, 396, 41, 41, 41, 41, 41, 390, 394, 398, 392, 400, 388, 41, 387, 391, 393, 386, 385, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 371, 373, 375, 365, 372, 43, 43, 43, 43, 43, 366, 370, 374, 368, 376, 364, 43, 363, 367, 369, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 395, 397, 399, 389, 396, 45, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 45, 387, 391, 393, 386, 385, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 371, 373, 375, 365, 372, 47, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 47, 363, 367, 369, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		// 165
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 49, 387, 391, 393, 386, 385, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 51, 363, 367, 369, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 389, 53, 53, 53, 53, 53, 53, 390, 394, 53, 392, 53, 388, 53, 387, 391, 393, 386, 385, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 365, 55, 55, 55, 55, 55, 55, 366, 370, 55, 368, 55, 364, 55, 363, 367, 369, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 389, 57, 57, 57, 57, 57, 57, 390, 394, 57, 392, 57, 388, 57, 387, 391, 393, 386, 385, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		// 170
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 365, 59, 59, 59, 59, 59, 59, 366, 370, 59, 368, 59, 364, 59, 363, 367, 369, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 389, 61, 61, 61, 61, 61, 61, 390, 394, 61, 392, 61, 388, 61, 387, 391, 393, 386, 385, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 365, 63, 63, 63, 63, 63, 63, 366, 370, 63, 368, 63, 364, 63, 363, 367, 369, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 389, 65, 65, 65, 65, 65, 65, 390, 394, 65, 392, 65, 388, 65, 387, 391, 393, 386, 385, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 365, 67, 67, 67, 67, 67, 67, 366, 370, 67, 368, 67, 364, 67, 363, 367, 369, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		// 175
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 397, 399, 389, 69, 69, 69, 69, 69, 69, 390, 394, 398, 392, 400, 388, 69, 387, 391, 393, 386, 385, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 373, 375, 365, 71, 71, 71, 71, 71, 71, 366, 370, 374, 368, 376, 364, 71, 363, 367, 369, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 397, 399, 389, 73, 73, 73, 73, 73, 73, 390, 394, 398, 392, 400, 388, 73, 387, 391, 393, 386, 385, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 373, 375, 365, 75, 75, 75, 75, 75, 75, 366, 370, 374, 368, 376, 364, 75, 363, 367, 369, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 386, 385, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		// 180
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 389, 81, 81, 81, 81, 81, 81, 390, 394, 81, 81, 81, 388, 81, 387, 391, 81, 386, 385, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 365, 83, 83, 83, 83, 83, 83, 366, 370, 83, 83, 83, 364, 83, 363, 367, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 389, 85, 85, 85, 85, 85, 85, 390, 394, 85, 85, 85, 388, 85, 387, 391, 85, 386, 385, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 365, 87, 87, 87, 87, 87, 87, 366, 370, 87, 87, 87, 364, 87, 363, 367, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 185
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 394, 89, 89, 89, 89, 89, 89, 89, 89, 386, 385, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 370, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 394, 93, 93, 93, 93, 93, 93, 93, 93, 386, 385, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 370, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 394, 97, 97, 97, 97, 97, 97, 97, 97, 386, 385, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		// 190
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 370, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 389, 101, 101, 101, 101, 101, 101, 390, 394, 101, 101, 101, 101, 101, 101, 391, 101, 386, 385, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 365, 103, 103, 103, 103, 103, 103, 366, 370, 103, 103, 103, 103, 103, 103, 367, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 389, 105, 105, 105, 105, 105, 105, 390, 394, 105, 105, 105, 105, 105, 105, 391, 105, 386, 385, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 365, 107, 107, 107, 107, 107, 107, 366, 370, 107, 107, 107, 107, 107, 107, 367, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		// 195
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 38: 8, 8, 8, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{41: 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 490, 27: 360, 359, 76: 340, 488, 489},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 38: 9, 9, 9, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369},
		{13: 491, 39: 492},
		// 200
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 27: 496, 495, 76: 493, 494},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 38: 5, 5, 5, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 38: 4, 4, 4, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369, 63: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		// 205
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 499, 486},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 497, 498},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 38: 2, 2, 2, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 38: 1, 1, 1, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369, 63: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 38: 3, 3, 3, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		// 210
		{504, 13: 123, 29: 501, 39: 123, 89: 505, 108: 502, 507, 122: 509, 506, 125: 503, 508},
		{535, 5: 536, 38: 123, 89: 538, 97: 537},
		{13: 128, 29: 128},
		{13: 114, 29: 501, 108: 534},
		{2: 513, 27: 519},
		// 215
		{13: 120, 39: 120},
		{13: 115, 39: 516},
		{117, 13: 117},
		{511, 13: 113, 109: 512},
		{13: 510},
		// 220
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{2: 513},
		{116, 13: 116},
		{514},
		{40: 515},
		// 225
		{118, 13: 118},
		{517, 13: 123, 39: 123, 89: 518},
		{27: 519},
		{13: 119, 39: 119},
		{520, 523, 348, 355, 358, 354, 349, 353, 522, 357, 351, 356, 347, 76: 521, 525, 127: 524},
		// 230
		{2: 528, 13: 124, 38: 124, 124, 124, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 95: 527, 98: 526},
		{41: 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{13: 126, 38: 126, 126, 126, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{13: 125, 38: 125, 125, 125, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{13: 122, 38: 122, 122, 122},
		// 235
		{13: 121, 38: 121, 121, 121, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173},
		{1: 532},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 27: 360, 359, 40: 530, 76: 340, 488, 529},
		{39: 492, 531},
		// 240
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{113: 533},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{13: 127, 29: 127},
		// 245
		{2: 562, 27: 519},
		{38: 143, 143, 143},
		{38: 559},
		{38: 539},
		{540, 94: 541, 107: 542},
		// 250
		{2: 545},
		{132, 13: 132},
		{540, 13: 544, 94: 543},
		{131, 13: 131},
		{13: 129, 29: 129},
		// 255
		{547, 40: 123, 88: 548, 546, 121: 549},
		{40: 138},
		{27: 519, 40: 137},
		{41: 551, 552, 553, 45: 554, 131: 555},
		{40: 550},
		// 260
		{133, 13: 133},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 88: 142},
		{141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 88: 141},
		{140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 88: 140},
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 88: 139},
		// 265
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 556, 557, 88: 558},
		{40: 136, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{40: 135, 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369},
		{40: 134},
		{540, 94: 541, 107: 560},
		// 270
		{540, 13: 561, 94: 543},
		{13: 130, 29: 130},
		{535, 5: 536, 39: 123, 123, 89: 563, 97: 564, 124: 565},
		{39: 148, 148},
		{39: 147, 147},
		// 275
		{39: 566, 567},
		{535, 5: 536, 39: 123, 123, 89: 568, 97: 569},
		{38: 144, 144, 144},
		{39: 146, 146},
		{39: 145, 145},
		// 280
		{38: 571},
		{19: 572, 115: 573, 137: 574},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 578, 579},
		{13: 110, 39: 110},
		{13: 576, 39: 575},
		// 285
		{19: 572, 115: 577},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{13: 109, 39: 109},
		{13: 112, 39: 112, 41: 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{13: 111, 39: 111, 41: 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369},
		// 290
		{40: 581, 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{613},
		// 295
		{38: 610, 10, 41: 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{14: 155, 38: 607, 9, 41: 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369, 63: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{14: 589},
		{14: 156, 38: 156},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 590, 591, 99: 592},
		// 300
		{14: 168, 38: 168, 41: 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{14: 169, 38: 169, 41: 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369},
		{14: 593},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 18: 584, 27: 360, 359, 38: 157, 76: 340, 595, 338, 81: 588, 104: 594},
		{38: 596},
		// 305
		{38: 155, 9, 41: 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369, 63: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 329, 338, 334, 335, 330, 336, 332, 333, 345, 331, 597},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 606, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 598, 338, 603, 604, 599, 605, 601, 602, 345, 600},
		{184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 39: 9, 41: 371, 373, 375, 365, 372, 378, 379, 382, 380, 381, 366, 370, 374, 368, 376, 364, 377, 363, 367, 369, 63: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183},
		// 310
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		// 315
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 329, 338, 334, 335, 330, 336, 332, 333, 345, 331, 608},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 609, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 598, 338, 603, 604, 599, 605, 601, 602, 345, 600},
		{162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162},
		// 320
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 329, 338, 334, 335, 330, 336, 332, 333, 345, 331, 611},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 612, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 598, 338, 603, 604, 599, 605, 601, 602, 345, 600},
		{161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161},
		{4: 614, 95: 615},
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 38: 221, 63: 618, 628, 630, 629, 619, 623, 625, 626, 621, 622, 620, 624, 627, 96: 631, 100: 632},
		// 325
		{113: 616},
		{617},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 38: 175},
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 27: 235, 235},
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 27: 234, 234},
		// 330
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 27: 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 27: 232, 232},
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 27: 231, 231},
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 27: 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 27: 229, 229},
		// 335
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 27: 228, 228},
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 27: 227, 227},
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 27: 226, 226},
		{225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 27: 225, 225},
		{224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 27: 224, 224},
		// 340
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 27: 223, 223},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 27: 635, 634, 76: 633, 486},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 38: 176},
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41: 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 637, 486},
		// 345
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 76: 636, 486},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 41: 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 41: 395, 397, 399, 389, 396, 402, 403, 406, 404, 405, 390, 394, 398, 392, 400, 388, 401, 387, 391, 393, 386, 385},
		{38: 639},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 329, 338, 334, 335, 330, 336, 332, 333, 345, 331, 640},
		// 350
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 641, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 598, 338, 603, 604, 599, 605, 601, 602, 345, 600},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 118: 643, 642},
		{163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163},
		{38: 644},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 329, 338, 334, 335, 330, 336, 332, 333, 345, 331, 645},
		// 355
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 646, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 598, 338, 603, 604, 599, 605, 601, 602, 345, 600},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164},
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 39: 492},
		// 360
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 27: 360, 359, 76: 340, 488, 652},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 38: 174, 492},
		{654, 4: 614, 95: 615},
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		// 365
		{13: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 33: 194, 194, 194, 194, 194},
		{13: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 33: 200, 200, 200, 200, 200},
		{2: 320, 91: 658},
		{2: 320, 38: 326, 91: 659, 93: 660},
		{38: 326, 93: 661},
		// 370
		{13: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 33: 202, 202, 202, 202, 202},
		{13: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 33: 203, 203, 203, 203, 203},
		{39: 671, 670},
		{204, 2: 204, 38: 204},
		{667, 4: 666, 44: 668},
		// 375
		{39: 196, 196},
		{199, 13: 199, 199, 199, 199, 199, 39: 199, 199},
		{198, 13: 198, 198, 198, 198, 198, 39: 198, 198},
		{669},
		{197, 13: 197, 197, 197, 197, 197, 39: 197, 197},
		// 380
		{205, 2: 205, 38: 205},
		{664, 90: 672},
		{39: 195, 195},
		{92: 207, 116: 674},
		{92: 675},
		// 385
		{38: 676, 136: 677},
		{664, 13: 682, 679, 311, 310, 309, 79: 680, 90: 678, 103: 681},
		{13: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 33: 206, 206, 206, 206, 206},
		{215, 13: 215, 215, 215, 215, 215},
		{214, 13: 214, 214, 214, 214, 214},
		// 390
		{213, 13: 213, 213, 213, 213, 213},
		{664, 13: 686, 684, 311, 310, 309, 79: 685, 90: 683},
		{13: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 33: 208, 208, 208, 208, 208},
		{212, 13: 212, 212, 212, 212, 212},
		{211, 13: 211, 211, 211, 211, 211},
		// 395
		{210, 13: 210, 210, 210, 210, 210},
		{13: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 33: 209, 209, 209, 209, 209},
		{689, 4: 688},
		{13: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 33: 221, 221, 221, 221, 221, 63: 618, 628, 630, 629, 619, 623, 625, 626, 621, 622, 620, 624, 627, 96: 631, 100: 690},
		{13: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 33: 216, 216, 216, 216, 216},
		// 400
		{13: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 33: 217, 217, 217, 217, 217},
		{13: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 33: 222, 222, 222, 222, 222},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 693, 134: 694},
		{664, 14: 679, 311, 310, 309, 79: 680, 90: 678, 103: 695},
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		// 405
		{664, 13: 696, 684, 311, 310, 309, 79: 685, 90: 683},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 698, 133: 699},
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 14: 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 329, 338, 334, 335, 330, 336, 332, 333, 345, 331, 700},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		// 410
		{339, 350, 348, 355, 358, 354, 349, 353, 352, 357, 351, 356, 347, 701, 346, 311, 310, 309, 337, 305, 306, 312, 314, 313, 315, 308, 307, 360, 359, 344, 341, 343, 342, 76: 340, 598, 338, 603, 604, 599, 605, 601, 602, 345, 600},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 703, 135: 704},
		{13: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 33: 289, 289, 289, 289, 111: 705},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		// 415
		{13: 706, 293, 311, 310, 309, 317, 305, 306, 312, 314, 313, 315, 308, 307, 33: 319, 316, 304, 318, 79: 301, 302, 82: 303, 299, 300, 101: 294, 105: 298, 297, 110: 292, 112: 296, 114: 295},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{732},
		{731},
		{730},
		// 420
		{729},
		{3: 728},
		{725},
		{722},
		{719},
		// 425
		{716},
		{33: 717},
		{718},
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{33: 720},
		// 430
		{721},
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		{92: 723},
		{724},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		// 435
		{33: 726},
		{727},
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		// 440
		{251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{1: 735},
		// 445
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{764},
		{756},
		{748},
		{740},
		// 450
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 741},
		{1: 742, 3: 743},
		{13: 747},
		{1: 745, 13: 744},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260},
		// 455
		{13: 746},
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261},
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 749},
		{1: 750, 3: 751},
		// 460
		{13: 755},
		{1: 753, 13: 752},
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264},
		{13: 754},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263},
		// 465
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265},
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 757},
		{1: 758, 3: 759},
		{13: 763},
		{1: 761, 13: 760},
		// 470
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268},
		{13: 762},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267},
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269},
		{274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 765},
		// 475
		{1: 766, 3: 767},
		{13: 771},
		{1: 769, 13: 768},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272},
		{13: 770},
		// 480
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271},
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273},
		{13: 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 33: 276, 276, 276, 276, 276},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 143

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 68:
		{
			mod := MakeModule(yyS[yypt-0].tok)
			CXT.AddModule(mod)
		}
	case 73:
		{
			if mod, err := CXT.GetCurrentModule(); err == nil {
				byts := []byte{}
				def := MakeDefinition(yyS[yypt-2].tok, &byts, yyS[yypt-1].tok)
				mod.AddDefinition(def)
			} else {
				panic(err)
			}

		}
	case 74:
		{
			if mod, err := CXT.GetCurrentModule(); err == nil {
				byts := []byte{}
				def := MakeDefinition(yyS[yypt-1].tok, &byts, yyS[yypt-0].tok)
				mod.AddDefinition(def)
			} else {
				panic(err)
			}
		}
	case 75:
		{
			var flds []*CXField
			flds = append(flds, MakeFieldFromParameter(yyS[yypt-0].parameter))
			yyVAL.fields = flds
		}
	case 76:
		{
			var flds []*CXField
			yyVAL.fields = flds
		}
	case 77:
		{
			var flds []*CXField
			yyVAL.fields = flds
		}
	case 78:
		{
			yyS[yypt-1].fields = append(yyS[yypt-1].fields, MakeFieldFromParameter(yyS[yypt-0].parameter))
			yyVAL.fields = yyS[yypt-1].fields
		}
	case 79:
		{
			yyVAL.fields = yyS[yypt-1].fields
		}
	case 80:
		{
			yyVAL.fields = yyS[yypt-1].fields
		}
	case 81:
		{
			yyVAL.fields = yyS[yypt-1].fields
		}
	case 82:
		{
			yyVAL.fields = nil
		}
	case 83:
		{
			if mod, err := CXT.GetCurrentModule(); err == nil {
				strct := MakeStruct(yyS[yypt-0].tok)
				mod.AddStruct(strct)

				// creating manipulation functions for this type a la common lisp
				// append
				fn := MakeFunction(fmt.Sprintf("[]%s.append", yyS[yypt-0].tok))
				fn.AddInput(MakeParameter("arr", fmt.Sprintf("[]%s", yyS[yypt-0].tok)))
				fn.AddInput(MakeParameter("strctInst", yyS[yypt-0].tok))
				fn.AddOutput(MakeParameter("_arr", fmt.Sprintf("[]%s", yyS[yypt-0].tok)))
				mod.AddFunction(fn)

				if op, err := CXT.GetFunction("cstm.append", CORE_MODULE); err == nil {
					expr := MakeExpression(op)
					if !replMode {
						expr.FileLine = yyS[yypt-0].line + 1
						expr.FileName = fileName
					}
					sArr := encoder.Serialize("arr")
					arrArg := MakeArgument(&sArr, "str")
					sStrctInst := encoder.Serialize("strctInst")
					strctInstArg := MakeArgument(&sStrctInst, "str")
					expr.AddArgument(arrArg)
					expr.AddArgument(strctInstArg)
					expr.AddOutputName("_arr")
					fn.AddExpression(expr)
				} else {
					fmt.Println(err)
				}

				// serialize
				fn = MakeFunction(fmt.Sprintf("%s.serialize", yyS[yypt-0].tok))
				fn.AddInput(MakeParameter("strctInst", yyS[yypt-0].tok))
				fn.AddOutput(MakeParameter("byts", "[]byte"))
				mod.AddFunction(fn)

				if op, err := CXT.GetFunction("cstm.serialize", CORE_MODULE); err == nil {
					expr := MakeExpression(op)
					if !replMode {
						expr.FileLine = yyS[yypt-0].line + 1
						expr.FileName = fileName
					}
					sStrctInst := encoder.Serialize("strctInst")
					strctInstArg := MakeArgument(&sStrctInst, "str")
					expr.AddArgument(strctInstArg)
					expr.AddOutputName("byts")
					fn.AddExpression(expr)
				} else {
					fmt.Println(err)
				}

				// deserialize
				fn = MakeFunction(fmt.Sprintf("%s.deserialize", yyS[yypt-0].tok))
				fn.AddInput(MakeParameter("byts", "[]byte"))
				fn.AddOutput(MakeParameter("strctInst", yyS[yypt-0].tok))
				mod.AddFunction(fn)

				if op, err := CXT.GetFunction("cstm.deserialize", CORE_MODULE); err == nil {
					expr := MakeExpression(op)
					if !replMode {
						expr.FileLine = yyS[yypt-0].line + 1
						expr.FileName = fileName
					}

					sByts := encoder.Serialize("byts")
					sBytsArg := MakeArgument(&sByts, "str")

					sTyp := encoder.Serialize(yyS[yypt-0].tok)
					sTypArg := MakeArgument(&sTyp, "str")

					expr.AddArgument(sBytsArg)
					expr.AddArgument(sTypArg)
					expr.AddOutputName("strctInst")

					fn.AddExpression(expr)
				} else {
					fmt.Println(err)
				}

				// read
				fn = MakeFunction(fmt.Sprintf("[]%s.read", yyS[yypt-0].tok))
				fn.AddInput(MakeParameter("arr", fmt.Sprintf("[]%s", yyS[yypt-0].tok)))
				fn.AddInput(MakeParameter("index", "i32"))
				fn.AddOutput(MakeParameter("strctInst", yyS[yypt-0].tok))
				mod.AddFunction(fn)

				if op, err := CXT.GetFunction("cstm.read", CORE_MODULE); err == nil {
					expr := MakeExpression(op)
					if !replMode {
						expr.FileLine = yyS[yypt-0].line + 1
						expr.FileName = fileName
					}
					sArr := encoder.Serialize("arr")
					arrArg := MakeArgument(&sArr, "str")
					sIndex := encoder.Serialize("index")
					indexArg := MakeArgument(&sIndex, "ident")
					expr.AddArgument(arrArg)
					expr.AddArgument(indexArg)
					expr.AddOutputName("strctInst")
					fn.AddExpression(expr)
				} else {
					fmt.Println(err)
				}
				// write
				fn = MakeFunction(fmt.Sprintf("[]%s.write", yyS[yypt-0].tok))
				fn.AddInput(MakeParameter("arr", fmt.Sprintf("[]%s", yyS[yypt-0].tok)))
				fn.AddInput(MakeParameter("index", "i32"))
				fn.AddInput(MakeParameter("inst", yyS[yypt-0].tok))
				fn.AddOutput(MakeParameter("_arr", fmt.Sprintf("[]%s", yyS[yypt-0].tok)))
				mod.AddFunction(fn)

				if op, err := CXT.GetFunction("cstm.write", CORE_MODULE); err == nil {
					expr := MakeExpression(op)
					if !replMode {
						expr.FileLine = yyS[yypt-0].line + 1
						expr.FileName = fileName
					}
					sArr := encoder.Serialize("arr")
					arrArg := MakeArgument(&sArr, "str")
					sIndex := encoder.Serialize("index")
					indexArg := MakeArgument(&sIndex, "ident")
					sInst := encoder.Serialize("inst")
					instArg := MakeArgument(&sInst, "str")
					expr.AddArgument(arrArg)
					expr.AddArgument(indexArg)
					expr.AddArgument(instArg)
					expr.AddOutputName("_arr")
					fn.AddExpression(expr)
				} else {
					fmt.Println(err)
				}
				// len
				fn = MakeFunction(fmt.Sprintf("[]%s.len", yyS[yypt-0].tok))
				fn.AddInput(MakeParameter("arr", fmt.Sprintf("[]%s", yyS[yypt-0].tok)))
				fn.AddOutput(MakeParameter("len", "i32"))
				mod.AddFunction(fn)

				if op, err := CXT.GetFunction("cstm.len", CORE_MODULE); err == nil {
					expr := MakeExpression(op)
					if !replMode {
						expr.FileLine = yyS[yypt-0].line + 1
						expr.FileName = fileName
					}
					sArr := encoder.Serialize("arr")
					arrArg := MakeArgument(&sArr, "str")
					expr.AddArgument(arrArg)
					expr.AddOutputName("len")
					fn.AddExpression(expr)
				} else {
					fmt.Println(err)
				}

				// make
				fn = MakeFunction(fmt.Sprintf("[]%s.make", yyS[yypt-0].tok))
				fn.AddInput(MakeParameter("len", "i32"))
				fn.AddOutput(MakeParameter("arr", fmt.Sprintf("[]%s", yyS[yypt-0].tok)))
				mod.AddFunction(fn)

				if op, err := CXT.GetFunction("cstm.make", CORE_MODULE); err == nil {
					expr := MakeExpression(op)
					if !replMode {
						expr.FileLine = yyS[yypt-0].line + 1
						expr.FileName = fileName
					}
					sLen := encoder.Serialize("len")
					sTyp := encoder.Serialize(fmt.Sprintf("[]%s", yyS[yypt-0].tok))
					lenArg := MakeArgument(&sLen, "ident")
					typArg := MakeArgument(&sTyp, "str")
					expr.AddArgument(lenArg)
					expr.AddArgument(typArg)
					expr.AddOutputName("arr")
					fn.AddExpression(expr)
				} else {
					fmt.Println(err)
				}
			}
		}
	case 84:
		{
			if strct, err := CXT.GetCurrentStruct(); err == nil {
				for _, fld := range yyS[yypt-0].fields {
					fldFromParam := MakeField(fld.Name, fld.Typ)
					strct.AddField(fldFromParam)
				}
			}
		}
	case 85:
		{
			yyVAL.parameters = yyS[yypt-1].parameters
		}
	case 86:
		{
			yyVAL.parameters = nil
		}
	case 87:
		{
			if len(yyS[yypt-4].parameters) > 1 {
				panic(fmt.Sprintf("%s: %d: method '%s' has multiple receivers", fileName, yyS[yypt-0].line+1, yyS[yypt-3].tok))
			}

			if mod, err := CXT.GetCurrentModule(); err == nil {
				if IsBasicType(yyS[yypt-4].parameters[0].Typ) {
					panic(fmt.Sprintf("%s: %d: cannot define methods on basic type %s", fileName, yyS[yypt-0].line+1, yyS[yypt-4].parameters[0].Typ))
				}

				inFn = true
				fn := MakeFunction(fmt.Sprintf("%s.%s", yyS[yypt-4].parameters[0].Typ, yyS[yypt-3].tok))
				mod.AddFunction(fn)
				if fn, err := mod.GetCurrentFunction(); err == nil {

					//checking if there are duplicate parameters
					dups := append(yyS[yypt-2].parameters, yyS[yypt-1].parameters...)
					dups = append(dups, yyS[yypt-4].parameters...)
					for _, param := range dups {
						for _, dup := range dups {
							if param.Name == dup.Name && param != dup {
								panic(fmt.Sprintf("%s: %d: duplicate receiver, input and/or output parameters in method '%s'", fileName, yyS[yypt-0].line+1, yyS[yypt-3].tok))
							}
						}
					}

					for _, rec := range yyS[yypt-4].parameters {
						fn.AddInput(rec)
					}
					for _, inp := range yyS[yypt-2].parameters {
						fn.AddInput(inp)
					}
					for _, out := range yyS[yypt-1].parameters {
						fn.AddOutput(out)
					}
				}
			}
		}
	case 88:
		{
			if len(yyS[yypt-3].parameters) > 1 {
				panic(fmt.Sprintf("%s: %d: method '%s' has multiple receivers", fileName, yyS[yypt-0].line+1, yyS[yypt-2].tok))
			}

			if mod, err := CXT.GetCurrentModule(); err == nil {
				if IsBasicType(yyS[yypt-3].parameters[0].Typ) {
					panic(fmt.Sprintf("%s: %d: cannot define methods on basic type %s", fileName, yyS[yypt-0].line+1, yyS[yypt-3].parameters[0].Typ))
				}

				inFn = true
				fn := MakeFunction(fmt.Sprintf("%s.%s", yyS[yypt-3].parameters[0].Typ, yyS[yypt-2].tok))
				mod.AddFunction(fn)
				if fn, err := mod.GetCurrentFunction(); err == nil {

					//checking if there are duplicate parameters
					dups := append(yyS[yypt-3].parameters, yyS[yypt-1].parameters...)
					for _, param := range dups {
						for _, dup := range dups {
							if param.Name == dup.Name && param != dup {
								panic(fmt.Sprintf("%s: %d: duplicate receiver, input and/or output parameters in method '%s'", fileName, yyS[yypt-0].line+1, yyS[yypt-2].tok))
							}
						}
					}

					for _, rec := range yyS[yypt-3].parameters {
						fn.AddInput(rec)
					}
					for _, inp := range yyS[yypt-1].parameters {
						fn.AddInput(inp)
					}
				}
			}
		}
	case 89:
		{
			if mod, err := CXT.GetCurrentModule(); err == nil {
				inFn = true
				fn := MakeFunction(yyS[yypt-2].tok)
				mod.AddFunction(fn)
				if fn, err := mod.GetCurrentFunction(); err == nil {
					for _, inp := range yyS[yypt-1].parameters {
						fn.AddInput(inp)
					}
				}
			}
		}
	case 90:
		{
			if mod, err := CXT.GetCurrentModule(); err == nil {
				inFn = true
				fn := MakeFunction(yyS[yypt-3].tok)
				mod.AddFunction(fn)
				if fn, err := mod.GetCurrentFunction(); err == nil {

					//checking if there are duplicate parameters
					dups := append(yyS[yypt-2].parameters, yyS[yypt-1].parameters...)
					for _, param := range dups {
						for _, dup := range dups {
							if param.Name == dup.Name && param != dup {
								panic(fmt.Sprintf("%s: %d: duplicate input and/or output parameters in function '%s'", fileName, yyS[yypt-0].line+1, yyS[yypt-3].tok))
							}
						}
					}

					for _, inp := range yyS[yypt-2].parameters {
						fn.AddInput(inp)
					}
					for _, out := range yyS[yypt-1].parameters {
						fn.AddOutput(out)
					}
				}
			}
		}
	case 91:
		{
			yyVAL.parameter = MakeParameter(yyS[yypt-1].tok, yyS[yypt-0].tok)
		}
	case 92:
		{
			yyVAL.parameter = MakeParameter(yyS[yypt-1].tok, yyS[yypt-0].tok)
		}
	case 93:
		{
			typ := "*" + yyS[yypt-0].tok
			yyVAL.parameter = MakeParameter(yyS[yypt-2].tok, typ)
		}
	case 94:
		{
			var params []*CXParameter
			params = append(params, yyS[yypt-0].parameter)
			yyVAL.parameters = params
		}
	case 95:
		{
			yyS[yypt-2].parameters = append(yyS[yypt-2].parameters, yyS[yypt-0].parameter)
			yyVAL.parameters = yyS[yypt-2].parameters
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
